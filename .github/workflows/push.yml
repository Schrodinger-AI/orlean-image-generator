name: Build and Deploy

on:
  push:
    branches: ['develop']

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}
  REPOSITORY: orlean-image-generator
  REPOSITORY_REGION: us-central1
  DOTNET_INSTALL_DIR: "./.dotnet"

jobs:
  build-and-test:
    runs-on: arc-runner-poc-orleans
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Test
        run: dotnet test --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage/*/coverage.cobertura.xml'
          badge: true
          format: 'markdown'
          output: 'both'
      - name: Write to Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
  build-and-publish:
    needs: build-and-test
    runs-on: arc-runner-poc-orleans
    strategy:
      matrix:
        servicename: [SiloHost, WebApiClient]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - run: dotnet publish ${{ matrix.servicename }}/${{ matrix.servicename }}.csproj -o out/${{ matrix.servicename }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.servicename }}
          path: out/${{ matrix.servicename }}
          retention-days: 1
  static-code-analysis:
    needs: build-and-test
    runs-on: arc-runner-poc-orleans
    environment: development
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarScanner for .NET
        run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Add .NET global tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
      - name: Begin SonarQube analysis
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"orlean-image-generator" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          dotnet build
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}" 
  build-and-push-image:
    needs: build-and-publish
    runs-on: arc-runner-poc-orleans
    environment: development
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        servicename: [SiloHost, WebApiClient]
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "short_sha=$calculatedSha" >> "$GITHUB_OUTPUT"
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.servicename }}
          path: out/${{ matrix.servicename }}

      - name: Create image tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REPOSITORY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.servicename }}
          tags: |
            type=sha

      - # Setting up Docker Buildx with docker-container driver is required
        # at the moment to be able to use a subdirectory with Git context
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            servicename=${{ matrix.servicename }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  dispatch:
    runs-on: arc-runner-poc-orleans
    needs: build-and-push-image
    environment: development
    strategy:
      matrix:
        servicename: [silohost, webapiclient]
    steps:
      - name: Deploy
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOK }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'poc-aaa',
              repo: 'devops',
              workflow_id: 'orleans-image-generator-deploy.yaml',
              ref: 'main',
              inputs: {
                env: 'development',
                appName: '${{ matrix.servicename }}',
                commit_sha: 'sha-${{ needs.build-and-push-image.outputs.short_sha }}',
              }
            })
